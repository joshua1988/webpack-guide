(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{249:function(t,e,a){"use strict";a.r(e);var r=a(3),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"웹팩으로-해결하려는-문제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#웹팩으로-해결하려는-문제","aria-hidden":"true"}},[t._v("#")]),t._v(" 웹팩으로 해결하려는 문제?")]),t._v(" "),a("p",[a("router-link",{attrs:{to:"/motivation/why-webpack.html#웹팩의-등장-배경"}},[t._v("웹팩의 등장 배경")]),t._v("에서도 살펴봤지만 웹팩에서 해결하고자 하는 기존의 문제점은 다음 4가지 입니다.")],1),t._v(" "),a("ul",[a("li",[t._v("자바스크립트 변수 유효 범위")]),t._v(" "),a("li",[t._v("브라우저별 HTTP 요청 숫자의 제약")]),t._v(" "),a("li",[t._v("사용하지 않는 코드의 관리")]),t._v(" "),a("li",[t._v("Dynamic Loading & Lazy Loading 미지원")])]),t._v(" "),a("h2",{attrs:{id:"자바스크립트-변수-유효-범위-문제"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#자바스크립트-변수-유효-범위-문제","aria-hidden":"true"}},[t._v("#")]),t._v(" 자바스크립트 변수 유효 범위 문제")]),t._v(" "),a("p",[t._v("웹팩은 변수 유효 범위의 문제점을 "),a("a",{attrs:{href:"https://babeljs.io/docs/en/learn#modules",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6의 Modules"),a("OutboundLink")],1),t._v(" 문법과 웹팩의 모듈 번들링으로 해결합니다.")]),t._v(" "),a("h2",{attrs:{id:"브라우저별-http-요청-숫자의-제약"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#브라우저별-http-요청-숫자의-제약","aria-hidden":"true"}},[t._v("#")]),t._v(" 브라우저별 HTTP 요청 숫자의 제약")]),t._v(" "),a("p",[t._v("TCP 스펙에 따라 브라우저에서 한 번에 서버로 보낼 수 있는 HTTP 요청 숫자는 제약되어 있습니다. 아래의 표는 최신 브라우저 별 최대 HTTP 요청 횟수입니다.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("브라우저")])]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[a("strong",[t._v("최대 연결 횟수")])])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("익스플로러 7")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("익스플로러 8 ~ 9")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("익스플로러 10, 11")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("8, 13")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("크롬")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("사파리")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("파이어폭스")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("오페라")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("6")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("안드로이드, iOS")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("6")])])])]),t._v(" "),a("p",[t._v("따라서, HTTP 요청 숫자를 줄이는 것이 웹 애플리케이션의 성능을 높여줄 뿐만 아니라 사용자가 사이트를 조작하는 시간을 앞당겨 줄 수 있죠.")]),t._v(" "),a("div",{staticClass:"tip custom-block"},[a("p",[t._v("⚠️ 알아두면 좋아요! "),a("br"),t._v("\n클라이언트에서 서버에 HTTP 요청을 보내기 위해서는 먼저 TCP/IP가 연결되어야 합니다.")])]),t._v(" "),a("p",[t._v("웹팩을 이용해 여러 개의 파일을 하나로 합치면 위와 같은 브라우저별 HTTP 요청 숫자 제약을 피할 수 있습니다.")]),t._v(" "),a("h2",{attrs:{id:"dynamic-loading-lazy-loading-미지원"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-loading-lazy-loading-미지원","aria-hidden":"true"}},[t._v("#")]),t._v(" Dynamic Loading & Lazy Loading 미지원")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://requirejs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Require.js"),a("OutboundLink")],1),t._v("와 같은 라이브러리를 쓰지 않으면 동적으로 원하는 순간에 모듈을 로딩하는 것이 불가능 했습니다. 그러나 이젠 웹팩의 "),a("a",{attrs:{href:""}},[t._v("Code Splitting")]),t._v(" 기능을 이용하여 원하는 모듈을 원하는 타이밍에 로딩할 수 있습니다.")])])}),[],!1,null,null,null);e.default=n.exports}}]);